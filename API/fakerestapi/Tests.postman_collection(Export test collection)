{
	"info": {
		"_postman_id": "464e3195-db99-41c7-9284-cc944fdaf4bf",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18654010"
	},
	"item": [
		{
			"name": "getAuthors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var dataJson=pm.response;\r",
							"pm.test(\"Status Code is 200\",function()\r",
							"{\r",
							"    pm.expect(dataJson.code).to.equals(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"response contain, id, idBook, firstName, lastName\",function() \r",
							"\r",
							"{\r",
							"var arr =[\"id\",\"idBook\", \"firstName\",\"lastName\"];\r",
							"responseText = pm.response.text();\r",
							"arr.forEach((x) => {\r",
							"\r",
							"if (pm.expect(responseText).to.contains(x)){\r",
							"\r",
							"result = true;\r",
							"\r",
							"return result;\r",
							"\r",
							"}\r",
							"});\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURl}}/api/v1/Authors",
					"host": [
						"{{BaseURl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response;\r",
							"\r",
							"pm.test(\"Status code for register users is 201\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"check if firstName and last name found\",function()\r",
							"{\r",
							"\r",
							"    let data = pm.response.json()\r",
							"   let keys = Object.keys(data)\r",
							"\r",
							"pm.expect(keys.length).to.equal(4)\r",
							"pm.expect(keys).to.include(\"firstName\")\r",
							"pm.expect(keys).to.include(\"lastName\")\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n \"firstName\": \"string\",\r\n  \"lastName\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURl}}/api/v1/Authors",
					"host": [
						"{{BaseURl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authors books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var dataJs=pm.response.json();\r",
							"pm.test(\"Verify that all respons contain the Book id that was inserted\",function(){\r",
							"pm.expect(dataJs[0].idBook).to.equals(5);\r",
							"pm.expect(dataJs[1].idBook).to.equals(5);\r",
							"pm.expect(dataJs[2].idBook).to.equals(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{BaseURl}}/api/v1/Authors/authors/books/{{idBook}}",
					"host": [
						"{{BaseURl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"authors",
						"books",
						"{{idBook}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put Authors",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var data=pm.response.json();\r",
							"pm.test(\"Verify that Author updated successfully\",function(){\r",
							"   pm.expect(data.id).to.equals(0);\r",
							"    pm.expect(data.idBook).to.equals(0);\r",
							"     pm.expect(data.firstName).to.equals(\"Test\");\r",
							"      pm.expect(data.lastName).to.equals(\"FWD\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"idBook\": 0,\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"FWD\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURl}}/api/v1/Authors/{{id}}",
					"host": [
						"{{BaseURl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Authors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data=pm.response.json();\r",
							"pm.test(\"Verify that the put data updated here\",function(){\r",
							"    pm.expect(data.id).to.equals(0);\r",
							"      pm.expect(data.idBook).to.equals(0);\r",
							"        pm.expect(data.firstName).to.equals(\"Test\");\r",
							"          pm.expect(data.lastName).to.equals(\"FWD\");\r",
							"\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURl}}/api/v1/Authors/{{id}}",
					"host": [
						"{{BaseURl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Author",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"for(i=1;i<10;i++)\r",
							"{\r",
							"    console.log(i)\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURl}}/api/v1/Authors/{{id}}",
					"host": [
						"{{BaseURl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}